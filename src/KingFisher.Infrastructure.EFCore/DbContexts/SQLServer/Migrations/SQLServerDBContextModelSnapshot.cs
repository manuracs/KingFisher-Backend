// <auto-generated />
using System;
using KingFisher.Infrastructure.EFCore.DbContexts.SQLServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KingFisher.Infrastructure.EFCore.DbContexts.SQLServer.Migrations
{
    [DbContext(typeof(SQLServerDBContext))]
    partial class SQLServerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KingFisher.Domain.Models.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.ToTable("Employees", null, t =>
                        {
                            t.HasCheckConstraint("CK_Employee_Position_Type", "PositionType IN (0, 2, 1, 3)");
                        });
                });

            modelBuilder.Entity("KingFisher.Domain.Models.FishFarms.FishFarm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("CagesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FarmImageURL")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasBarge")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("FishFarms", (string)null);
                });

            modelBuilder.Entity("KingFisher.Domain.Models.FishFarms.FishFarmEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CertificationExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FishFarmId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FishFarmId");

                    b.ToTable("FishFarmEmployees", (string)null);
                });

            modelBuilder.Entity("KingFisher.Domain.Models.Employees.Employee", b =>
                {
                    b.OwnsOne("KingFisher.Domain.Models.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasPrecision(50)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasPrecision(50)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("KingFisher.Domain.Models.FishFarms.FishFarm", b =>
                {
                    b.OwnsOne("KingFisher.Domain.Models.ValueObjects.GPSPosition", "GPSPosition", b1 =>
                        {
                            b1.Property<Guid>("FishFarmId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Latitude")
                                .HasPrecision(9, 4)
                                .HasColumnType("decimal(9,4)")
                                .HasColumnName("Latitude");

                            b1.Property<decimal>("Longitude")
                                .HasPrecision(9, 4)
                                .HasColumnType("decimal(9,4)")
                                .HasColumnName("Longitude");

                            b1.HasKey("FishFarmId");

                            b1.ToTable("FishFarms");

                            b1.WithOwner()
                                .HasForeignKey("FishFarmId");
                        });

                    b.Navigation("GPSPosition")
                        .IsRequired();
                });

            modelBuilder.Entity("KingFisher.Domain.Models.FishFarms.FishFarmEmployee", b =>
                {
                    b.HasOne("KingFisher.Domain.Models.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KingFisher.Domain.Models.FishFarms.FishFarm", "FishFarm")
                        .WithMany("FishFarmEmployees")
                        .HasForeignKey("FishFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("FishFarm");
                });

            modelBuilder.Entity("KingFisher.Domain.Models.FishFarms.FishFarm", b =>
                {
                    b.Navigation("FishFarmEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
